create database Sql_Assignment2
use Sql_Assignment2

--DEPT(deptno, dname, loc)
create table DEPT(deptno int primary key , dname varchar(20) not null , loc varchar(10)) 

select * from DEPT

--EMP(empno, ename, job, mgr-id, hiredate, sal, comm., deptno) 
create table Employee(empno int primary key, ename varchar(10),job varchar(10), mgr_id numeric(10),hiredate date, sal NUMERIC(10),
comm numeric(10),deptno int foreign key references DEPT(deptno))


select * from Employee

/*DEPTNO  DNAME        LOC 
10     ACCOUNTING    NEW YORK 
20     RESEARCH      DALLAS 
30     SALES         CHICAGO 
40     OPERATIONS    BOSTON */

insert into DEPT Values(10, 'ACCOUNTING','NEW YORK'),(20,'RESEARCH','DALLAS'),(30,'SALES','CHICAGO'),(40,'OPERATIONS','BOSTON')  


select * from DEPT


/*EMPNO   ENAME     JOB   		MGR-Id   	HIREDATE      	 SAL     COMM   DEPTNO 
7369    SMITH     CLERK	      7902   		17-DEC-80     	 800	            20
7499    ALLEN     SALESMAN     7698   	    20-FEB-81    	 1600     300    30
7521    WARD	    SALESMAN        7698    	22-FEB-81  	 1250     500    30
7566    JONES     MANAGER       7839   	 02-APR-81   	 2975            20
7654    MARTIN    SALESMAN      7698   	 28-SEP-81  	 1250    1400    30
7698	    BLAKE 	MANAGER 	    7839 	     01-MAY-81       2850            30
7782  	CLARK     MANAGER       7839    	09-JUN-81   	 2450            10
7788  	SCOTT     ANALYST       7566   	 19-APR-87     3000            20
7839    KING      PRESIDENT            	 17-NOV-81     5000            10
7844    TURNER    SALESMAN      7698    	08-SEP-81    	 1500      0     30
7876    ADAMS     CLERK         7788    	23-MAY-87      1100             20
7900    JAMES     CLERK         7698   	 03-DEC-81  	 950             30
7902    FORD      ANALYST       7566   	 03-DEC-81   	 3000            20
7934    MILLER    CLERK         7782    	23-JAN-82	      1300            10*/



insert into Employee Values
(7369,'SMITH','CLERK',7902, '17-DEC-80 ', 800,null, 20),
(7499, 'ALLEN ','SALESMAN ',7698, '20-FEB-81', 1600, 300 ,  30),
(7521, 'WARD ','SALESMAN',  7698, '22-FEB-81', 1250,  500,  30),
(7566, 'JONES ',' MANAGER ', 7839 ,'02-APR-81 ',2975 ,null,  20),
(7654, 'MARTIN',' SALESMAN ',7698 ,'28-SEP-81' ,1250, 1400 , 30),
(7698,'BLAKE','MANAGER',7839 ,'01-MAY-81 ',2850 ,null, 30),
(7782,'CLARK ','MANAGER',7839 ,'09-JUN-81 ', 2450 ,null, 10),
(7788,'SCOTT','ANALYST ',7566, '19-APR-87', 3000 ,null,  20),
(7839,'KING ','PRESIDENT ',null,'17-NOV-81', 5000, null, 10),
(7844,'TURNER','SALESMAN ',7698 ,'08-SEP-81 ',1500,0,30),
(7876,'ADAMS','CLERK', 7788,' 23-MAY-87 ',1100 , null,20),
(7900 ,'JAMES','CLERK', 7698 ,' 03-DEC-81', 950  ,null, 30),
(7902 ,'FORD',' ANALYST',7566,' 03-DEC-81', 3000,null, 20),
(7934,'MILLER ','CLERK',7782,'23-JAN-82', 1300 ,null,  10)


select * from Employee

/*1.    Write a T-SQL based procedure Program to generate complete payslip of a given employee with respect to the following condition
 
a)    HRA  as 10% Of sal
b)    DA as  20% of sal
c)    PF as 8% of sal
d)    IT as 5% of sal
e)    Deductions as sum of PF and IT
f)    Gross Salary as sum of SAL,HRA,DA 
g)    Net salary as  Gross salary- Deduction*/


--begin transaction

---- delete from employee where empno=7369  -- has to be comitted
---- select * from employee
---- save tran s1
---- update employee 


---- save tran s2
---- update Dept set job ='MANAGER' where deptno=20
---- select * from DEPT
---- rollback tran s1
---- commit





--  -----------------------------
   
--  create or alter procedure getEmployeeSalary (@name varchar(10), @sal numeric(10) output)
--  as
--  begin
--   select @sal=sal from employee where ename=@name
--   set @sal=@sal+500
--  end

--  --executing the above procedure using method 1
--  declare @retsal float
--  execute getEmployeeSalary 'SMITH', @retsal output
--  print @retsal
--  set @retsal=@retsal-500
--  print @retsal

--  --update Employee set sal=sal+sal* 0.10;

--  create or alter procedure getEmployeeSalary (@name varchar(10), @sal numeric(10) output)
--  as
--  begin
--   select @sal=sal from employee where ename=@name
--   set @sal=@sal+@sal *0.10
--  end

--  --executing the above procedure using method 1
--  declare @retsal float
--  execute getEmployeeSalary 'SMITH', @retsal output
--  print @retsal
--  set @retsal=@retsal-100
--  print @retsal

  
----b)    DA as  20% of sal
--create or alter procedure getEmployeeSalary (@name varchar(10), @sal numeric(10) output)
--  as
--  begin
--   select @sal=sal from employee where ename=@name
--   set @sal=@sal+@sal *0.20
--  end

--  --executing the above procedure using method 1
--  declare @retsal float
--  execute getEmployeeSalary 'SMITH', @retsal output
--  print @retsal
--  set @retsal=@retsal-200
--  print @retsal


--  --------------------------
--  CREATE PROCEDURE increase_salary (
--  i_percent IN NUMBER,
--  i_job     IN VARCHAR2
--)
--IS
--BEGIN
--  UPDATE employee
--  SET   sal = sal * (1 + i_percent/100)
--  WHERE job = i_job;
--END;

--a)    HRA  as 10% Of sal
--b)    DA as  20% of sal
--c)    PF as 8% of sal
--d)    IT as 5% of sal
--e)    Deductions as sum of PF and IT
--f)    Gross Salary as sum of SAL,HRA,DA 
--g)    Net salary as  Gross salary- Deduction*/
create or alter procedure getEmployeeSalary (@name varchar(10), @sal numeric(10) output)
  as
  begin
SELECT ename,
  sal,
  sal/100*10                          AS hra,
  sal/100*20                          AS da,
  sal/100*8                         AS pf,
  sal/100*5                    AS IT,
    sal/100*8-sal/100*5 AS deductions,
   sal+sal/100*15+sal/100*10+sal/100*20 AS grosssalary,
   sal+sal/100*5-sal/100*8 -sal+sal/100*15+sal/100*10-sal/100*5 as netsalary
   
FROM employee where empno=7369
end

declare @grosssalary float
declare @deduction float
declare @netsalary float
  execute getEmployeeSalary 'SMITH', @netsalary output
  print @netsalary
  set @netsalary=@grosssalary- @deduction
  print @netsalary
--------------------hra pf da it indiviual employee or full employee-------------------------------------
SELECT ename,
  sal,
  sal/100*10                         AS hra,
  sal/100*8                            AS pf,
  sal/100*20                          AS da,
   sal/100*5                    AS IT,
   
  sal/100*8-sal/100*5 AS deductions,
  sal+sal/100*10+sal/100*20-sal/100*5 AS grosssalary,
 sal+sal/100*5-sal/100*8 -sal+sal/100*15+sal/100*10-sal/100*5 as netsalary
  
FROM employee 


where empno=7369;

--WSL011805884

--Write and execute the necessary SQL statements to perform the following tasks. 

--1. List all employees whose name begins with 'A'.

select * from employee where ename like ('A%')



--2. Select all those employees who don't have a manager. 
select ename from Employee where job not in ('MANAGER')
--select * from Employee where job like !='MANAGER'
select * from Employee where job like'!=manager%'
--select empno,ename from Employee where 'MANAGER'='' 

--3.List employee name, number and salary for those employees who earn in the range 1200 to 1400. 
select empno,ename,sal from Employee where sal >1200 and sal <1400

--4. Give all the employees in the RESEARCH department a 10% pay rise.
--Verify that this has been done by listing all their details before and after the rise.
update Employee set sal=sal+sal* 0.10;

select * from Employee
--or

select empno,ename,job,sal,(sal+sal*0.1)as 'rise salry' from Employee where DEPTNO=20

--5. Find the number of CLERKS employed. Give it a descriptive heading. 
select  empno from Employee where job= 'CLERK'

--6. Find the average salary for each job type and the number of people employed in each job. 

select avg(sal),job,count(empno) from Employee group by job

--7. List the employees with the lowest and highest salary.

--select ename,sal from Employee where sal=(select max(sal)from Employee);
--select ename,sal from Employee where sal=(select min(sal)from Employee);
--or
select max(sal) as maxsalary ,min(sal) as minsalary from Employee


--8. List full details of departments that don't have any employees.
select * from DEPT where  deptno=(select deptno from Employee where ename='')

--9. Get the names and salaries of all the analysts earning more than 1200 who are based in department 20. 
--Sort the answer by ascending order of name. 

select ename,sal from Employee where job='ANALYST' and sal>1200 and deptno=20  order by ename asc

--10. For each department, list its name and number together with the total salary paid to employees in that department. 
select deptno, sum(sal)as 'total salary'
from Employee
group by deptno

--11. Find out salary of both MILLER and SMITH.

select ename,sal from Employee where ename in('MILLAR','SMITH')

--12. Find out the names of the employees whose name begin with ‘A’ or ‘M’.
select ename from Employee where ename like 'A%' OR ename like 'M%'

--13. Compute yearly salary of SMITH. 
--select sal,sum(12*sal) from Employee where ename='SMITH'
Select sal,ename ,sum(sal*12) as 'yearly salary' from Employee
where ename= 'SMITH'
group by sal,ename

--14. List the name and salary for all employees whose salary is not in the range of 1500 and 2850.
select empno,ename,sal from Employee where sal not between 1500 and 2850

--SET II  (Using the same tables as Assignment 2)

--1. Retrieve a list of MANAGERS.


select * from employee where job='manager'


--2. Find out the names and salaries of all employees earning more than 1000 per month.
select ename,sal from Employee where sal>1000

--3. Display the names and salaries of all employees except JAMES.
SELECT ename, sal FROM Employee WHERE ename != 'JAMES'

--4. Find out the details of employees whose names begin with ‘S’.
select ename from Employee where ename like 'S%'

--5. Find out the names of all employees that have ‘A’ anywhere in their name. 
select ename from Employee where ename like '%A%'

--6. Find out the names of all employees that have ‘L’ as their third character in 
--their name. 
select ename from Employee where ename like '__L%'

--7. Compute daily salary of JONES. 
select ename,(sal/31) as'per day salary'from employee where ename='jones'

--8. Calculate the total monthly salary of all employees.
select sum(sal) as'total monthly salary' from employee


--9. Print the average annual salary . 
select avg(sal)as 'avg annual salary' from Employee 

--10. Select the name, job, salary, department number of all employees except 
--SALESMAN from department number 30. 
select ename,job ,sal ,deptno from Employee where job!='SALESMAN' and deptno!=30

--11. List unique departments of the EMP table. 
select Distinct deptno from employee


--12. List the name and salary of employees who earn more than 1500 and are in department 10 or 30. 
--Label the columns Employee and Monthly Salary respectively.
select ename,sal from Employee where sal>1500 and deptno =30 or deptno=10


--13. Display the name, job, and salary of all the employees whose job is MANAGER or 
--ANALYST and their salary is not equal to 1000, 3000, or 5000. 
select ename,job ,sal from Employee where job ='MANAGER'or job='ANALYST' AND  sal !=1000 and sal!= 3000 and sal !=5000



--14. Display the name, salary and commission for all employees whose commission 
--amount is greater than their salary increased by 10%. 
select ename, sal ,comm= sal+sal*0.1 from Employee where sal<comm


--15. Display the name of all employees who have two Ls in their name and are in 
--department 30 or their manager is 7782. 
select  ename,deptno,mgr_id from Employee   where ename like '%LL%' and deptno= 30 or mgr_id= 7782

--16. Display the names of employees with experience of over 30 years and under 40 yrs.
 --Count the total number of employees. 
  

 Select empno,ename, datediff(year,hiredate,getdate()) as experience,Count(*) as 'Count' 
 from Employee where datediff(year,hiredate,getdate())>30 and datediff (year,hiredate,getdate())<40 
 group by ename,hiredate,empno

--17. Retrieve the names of departments in ascending order and their employees in 
--descending order. 
select dname,ename from Employee join dept on employee.deptno= dept.deptno order by dname ,ename  desc

--18. Find out experience of MILLER. 
SELECT empno as EmpID, ename as EmpName,convert(varchar(3),DATEDIFF(MONTH,Hiredate ,
GETDATE())/12) +' years '+ convert(varchar(2),DATEDIFF(MONTH,Hiredate, GETDATE()) % 12)+ ' months'AS EXPERIENCE FROM Employee
  WHERE ename = 'MILLER'


  select * from employee