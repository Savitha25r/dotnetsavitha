create database Sql_Assignment2
use Sql_Assignment2

--DEPT(deptno, dname, loc)
create table DEPT(deptno int primary key , dname varchar(20) not null , loc varchar(10)) 

select * from DEPT

--EMP(empno, ename, job, mgr-id, hiredate, sal, comm., deptno) 
create table Employee(empno int primary key, ename varchar(10),job varchar(10), mgr_id numeric(10),hiredate date, sal NUMERIC(10),
comm numeric(10),deptno int foreign key references DEPT(deptno))


select * from Employee

/*DEPTNO  DNAME        LOC 
10     ACCOUNTING    NEW YORK 
20     RESEARCH      DALLAS 
30     SALES         CHICAGO 
40     OPERATIONS    BOSTON */

insert into DEPT Values(10, 'ACCOUNTING','NEW YORK'),(20,'RESEARCH','DALLAS'),(30,'SALES','CHICAGO'),(40,'OPERATIONS','BOSTON')  


select * from DEPT


/*EMPNO   ENAME     JOB   		MGR-Id   	HIREDATE      	 SAL     COMM   DEPTNO 
7369    SMITH     CLERK	      7902   		17-DEC-80     	 800	            20
7499    ALLEN     SALESMAN     7698   	    20-FEB-81    	 1600     300    30
7521    WARD	    SALESMAN        7698    	22-FEB-81  	 1250     500    30
7566    JONES     MANAGER       7839   	 02-APR-81   	 2975            20
7654    MARTIN    SALESMAN      7698   	 28-SEP-81  	 1250    1400    30
7698	    BLAKE 	MANAGER 	    7839 	     01-MAY-81       2850            30
7782  	CLARK     MANAGER       7839    	09-JUN-81   	 2450            10
7788  	SCOTT     ANALYST       7566   	 19-APR-87     3000            20
7839    KING      PRESIDENT            	 17-NOV-81     5000            10
7844    TURNER    SALESMAN      7698    	08-SEP-81    	 1500      0     30
7876    ADAMS     CLERK         7788    	23-MAY-87      1100             20
7900    JAMES     CLERK         7698   	 03-DEC-81  	 950             30
7902    FORD      ANALYST       7566   	 03-DEC-81   	 3000            20
7934    MILLER    CLERK         7782    	23-JAN-82	      1300            10*/



insert into Employee Values
(7369,'SMITH','CLERK',7902, '17-DEC-80 ', 800,null, 20),
(7499, 'ALLEN ','SALESMAN ',7698, '20-FEB-81', 1600, 300 ,  30),
(7521, 'WARD ','SALESMAN',  7698, '22-FEB-81', 1250,  500,  30),
(7566, 'JONES ',' MANAGER ', 7839 ,'02-APR-81 ',2975 ,null,  20),
(7654, 'MARTIN',' SALESMAN ',7698 ,'28-SEP-81' ,1250, 1400 , 30),
(7698,'BLAKE','MANAGER',7839 ,'01-MAY-81 ',2850 ,null, 30),
(7782,'CLARK ','MANAGER',7839 ,'09-JUN-81 ', 2450 ,null, 10),
(7788,'SCOTT','ANALYST ',7566, '19-APR-87', 3000 ,null,  20),
(7839,'KING ','PRESIDENT ',null,'17-NOV-81', 5000, null, 10),
(7844,'TURNER','SALESMAN ',7698 ,'08-SEP-81 ',1500,0,30),
(7876,'ADAMS','CLERK', 7788,' 23-MAY-87 ',1100 , null,20),
(7900 ,'JAMES','CLERK', 7698 ,' 03-DEC-81', 950  ,null, 30),
(7902 ,'FORD',' ANALYST',7566,' 03-DEC-81', 3000,null, 20),
(7934,'MILLER ','CLERK',7782,'23-JAN-82', 1300 ,null,  10)


select * from Employee

/*1.    Write a T-SQL based procedure Program to generate complete payslip of a given employee with respect to the following condition
 
a)    HRA  as 10% Of sal
b)    DA as  20% of sal
c)    PF as 8% of sal
d)    IT as 5% of sal
e)    Deductions as sum of PF and IT
f)    Gross Salary as sum of SAL,HRA,DA 
g)    Net salary as  Gross salary- Deduction*/


--begin transaction

-- delete from employee where empno=7369  -- has to be comitted
-- select * from employee
-- save tran s1
-- update employee 


-- save tran s2
-- update Dept set job ='MANAGER' where deptno=20
-- select * from DEPT
-- rollback tran s1
-- commit





  -----------------------------
   
  create or alter procedure getEmployeeSalary (@name varchar(10), @sal numeric(10) output)
  as
  begin
   select @sal=sal from employee where ename=@name
   set @sal=@sal+500
  end

  --executing the above procedure using method 1
  declare @retsal float
  execute getEmployeeSalary 'SMITH', @retsal output
  print @retsal
  set @retsal=@retsal-500
  print @retsal

  --update Employee set sal=sal+sal* 0.10;

  create or alter procedure getEmployeeSalary (@name varchar(10), @sal numeric(10) output)
  as
  begin
   select @sal=sal from employee where ename=@name
   set @sal=@sal+@sal *0.10
  end

  --executing the above procedure using method 1
  declare @retsal float
  execute getEmployeeSalary 'SMITH', @retsal output
  print @retsal
  set @retsal=@retsal-100
  print @retsal

  
--b)    DA as  20% of sal
create or alter procedure getEmployeeSalary (@name varchar(10), @sal numeric(10) output)
  as
  begin
   select @sal=sal from employee where ename=@name
   set @sal=@sal+@sal *0.20
  end

  --executing the above procedure using method 1
  declare @retsal float
  execute getEmployeeSalary 'SMITH', @retsal output
  print @retsal
  set @retsal=@retsal-200
  print @retsal


  --------------------------
  CREATE PROCEDURE increase_salary (
  i_percent IN NUMBER,
  i_job     IN VARCHAR2
)
IS
BEGIN
  UPDATE employee
  SET   sal = sal * (1 + i_percent/100)
  WHERE job = i_job;
END;

--a)    HRA  as 10% Of sal
--b)    DA as  20% of sal
--c)    PF as 8% of sal
--d)    IT as 5% of sal
--e)    Deductions as sum of PF and IT
--f)    Gross Salary as sum of SAL,HRA,DA 
--g)    Net salary as  Gross salary- Deduction*/
create or alter procedure getEmployeeSalary (@name varchar(10), @sal numeric(10) output)
  as
  begin
SELECT ename,
  sal,
  sal/100*10                          AS hra,
  sal/100*20                          AS da,
  sal/100*8                         AS pf,
  sal/100*5                    AS IT
    sal/100*8-sal/100*5 AS deductions,
   sal+sal/100*15+sal/100*10+sal/100*20 AS grosssalary
   
FROM employee;
end
--------------------hra pf da it-------------------------------------
SELECT ename,
  sal,
  sal/100*10                         AS hra,
  sal/100*8                            AS pf,
  sal/100*20                          AS da,
   --sal/100*5                    AS IT
   
  sal/100*5-sal/100*8 AS deductions,
  sal+sal/100*10+sal/100*20-sal/100*5 AS grosssalary
  --sal+sal/100*5-sal/100*8 -sal+sal/100*15+sal/100*10-sal/100*5 as netsalary
  
FROM employee;

